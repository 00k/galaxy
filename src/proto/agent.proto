import "galaxy.proto";
package baidu.galaxy;

option cc_generic_services = true;

<<<<<<< HEAD
message RunTaskRequest {
    optional int64 task_id = 1;
    optional string task_name = 2;
    optional bytes task_raw = 3;
    optional string cmd_line = 4;
    optional double cpu_share = 5;
    optional int64 mem_share = 6;
    optional int32 job_replicate_num = 7;
    optional int32 task_offset = 8;
    optional int64 job_id = 9; // use to rebuild master
    optional double cpu_limit = 10;
    optional string monitor_conf = 11;

    optional AgentResourceScheduleMode schedule_mode = 12;
    // task configuration version which will be report to master
    optional int32 version = 13;
=======
message QueryRequest {
>>>>>>> upstream/refactor
}

message QueryResponse {
    optional AgentInfo agent = 1;
}

message RunPodRequest {
    optional string podid = 1;
    optional PodDescriptor pod = 2;
}

message RunPodResponse {
    optional Status status = 1;
}

message KillPodRequest {
    optional string podid = 1;
}

message KillPodResponse {
    optional Status status = 1;
}

message UpdateTaskRequest {
    required int64 task_id = 1;
    // just support package update currently
    required bytes task_raw = 2;
    required int32 version = 3;
}

message UpdateTaskResponse {
    optional int32 status = 1;
}


service Agent {
<<<<<<< HEAD
    rpc RunTask(RunTaskRequest) returns(RunTaskResponse);
    rpc KillTask(KillTaskRequest) returns(KillTaskResponse);
    rpc SetPassword(SetPasswordRequest) returns (SetPasswordResponse);
    rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse);
=======
    rpc Query(QueryRequest) returns (QueryResponse);
    rpc RunPod(RunPodRequest) returns (RunPodResponse);
    rpc KillPod(KillPodRequest) returns (KillPodResponse);
>>>>>>> upstream/refactor
}
