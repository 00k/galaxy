
package galaxy;

import "task.proto";

option cc_generic_services = true;

enum MasterCommandType {
    HEART_BEAT = 0;
    // Task control
    LAUNCH_TASK = 1;
    KILL_TASK = 2;
    CLEAN_TAKS = 3;     // before GC time, agent should be clean without command ?
    // Container Control
    CREATE_CONTAINER = 4;   
    DESTORY_CONTAINER = 5;
    UPDATE_CONTAINER = 6;
}

//message LaunchTaskRequest {
//    optional int64 task_id = 1;
//    optional TaskInfo task_info = 2;
//}

message HeartBeatRequest {
    optional int64 seq_id = 1;      // id for communicate
    optional int64 agent_id = 2 [default = -1];
    optional string agent_addr = 3;
    repeated ResourceItem total_resource_list = 4;
    repeated ResourceItem used_resource_list = 5;
    repeated TaskStatus task_status = 6;
}

message HeartBeatResponse {
    optional int64 seq_id = 1;
    optional int32 status = 2;
    //optional MasterCommandType type = 3[default = HEART_BEAT];
    //optional LaunchTaskRequest launch_task_request = 4;
    optional int64 agent_id = 5;
}

message NewTaskRequest {
    optional string task_name = 2;
    optional bytes task_raw = 3;
    optional string cmd_line = 4;
    optional int32 replica_num = 5;
}

message NewTaskResponse {
    optional int32 status = 2;
}

message TerminateTaskRequest {
    optional int64 task_id = 2;
}

message TerminateTaskResponse {
    optional int32 status = 2;
}

// List task
message TaskInstance {
    optional TaskInfo info = 1;
    optional int32 status = 2;
    optional string agent_addr = 3;
    optional int64 job_id = 4;
    optional int32 start_time = 5;
}
message ListTaskRequest {
    optional int64 job_id = 2;
    optional int64 task_id = 3;
}
message ListTaskResponse {
    repeated TaskInstance tasks = 2;
}

message JobInstance {
    optional int64 job_id = 2;
    optional string job_name = 3;
    optional int32 running_task_num = 4;
    optional int32 replica_num = 5;
}
message ListJobRequest {
}
message ListJobResponse {
    repeated JobInstance jobs = 2; 
}

service Master {
    rpc HeartBeat(HeartBeatRequest) returns(HeartBeatResponse);

    rpc NewTask(NewTaskRequest) returns(NewTaskResponse);
    rpc TerminateTask(TerminateTaskRequest) returns(TerminateTaskResponse);
    rpc ListTask(ListTaskRequest) returns(ListTaskResponse);
    rpc ListJob(ListJobRequest) returns(ListJobResponse);
}

